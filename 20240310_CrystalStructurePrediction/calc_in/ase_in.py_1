import numpy as np
import subprocess
import sys
import os
from ase.calculators.calculator import FileIOCalculator
from ase.units import Bohr, Hartree
from ase.io import write

class xtb_gfnff_pbc(FileIOCalculator):
   implemented_properties = ['energy', 'forces', 'stress']
   discard_results_on_any_change = True

   def __init__(self,
      restart=None,
      ignore_bad_restart_file=FileIOCalculator._deprecated,
      label='xtb',
      atoms=None,
      command=None,
      profile=None,
      **kwargs):

      command = 'xtb xtb.coord --gfnff --norestart --grad > xtb.out'

      super().__init__(
         restart,
         ignore_bad_restart_file,
         label,
         atoms,
         command=command,
         profile=profile,
         **kwargs)

   def write_input(self, atoms, properties=None, system_changes=None):
      FileIOCalculator.write_input(self, atoms, properties, system_changes)

      with open('xtb.coord', 'w') as fout:
         fout.write('$coord\n')
         for pos, lab in zip(atoms.get_positions(), atoms.get_chemical_symbols()):
            fout.write(f'{pos[0]/Bohr} {pos[1]/Bohr} {pos[2]/Bohr} {lab}\n')
         fout.write('$periodic 3\n')
         fout.write('$lattice bohr\n')
         for xyz in atoms.get_cell():
            fout.write(f'{xyz[0]/Bohr} {xyz[1]/Bohr} {xyz[2]/Bohr}\n')
         fout.write('$end\n')

   def read_results(self):
      with open('gradient', 'r') as fin:
         fin.readline()
         line = fin.readline()
         _energy = line.split()[6]

         for _ in range(len(self.atoms)):
            fin.readline()

         _forces = []
         for _ in range(len(self.atoms)):
            _forces.append(fin.readline().split())
      
      self.results['energy'] = float(_energy)
      self.results['forces'] = -np.array(_forces, dtype=float) * Hartree / Bohr

      with open('gradlatt', 'r') as fin:
         for _ in range(5):
            fin.readline()
         _stress = []
         for _ in range(3):
            _stress.append(fin.readline().split())

      _stress = np.array(_stress, dtype=float)
      _stress *= Hartree / Bohr / self.atoms.cell.volume
      _stress = _stress.T @ self.atoms.cell
      self.results['stress'] = _stress.flat[[0, 4, 8, 5, 2, 1]]

from ase.constraints import ExpCellFilter, StrainFilter
from ase.optimize import BFGS
from ase.spacegroup.symmetrize import FixSymmetry
from ase.io import read, write
import shutil

if __name__ == '__main__':
   try:
      atoms = read('POSCAR', format='vasp')
      atoms.calc = xtb_gfnff_pbc()
      atoms.set_constraint([FixSymmetry(atoms)])
      atoms = ExpCellFilter(atoms, hydrostatic_strain=False)
      opt = BFGS(atoms)
      opt.run(fmax=0.05, steps=1000)

      e = atoms.atoms.get_total_energy()
      with open('log.tote', mode='w') as f:
          f.write(str(e))

      write('CONTCAR', atoms.atoms, format='vasp')

   except:
      with open('log.tote', 'w') as f:
         f.write('9999')
          
      if os.path.isfile('POSCAR'):
         shutil.copyfile('POSCAR', 'CONTCAR')
      else:
         with open('CONTCAR', 'w') as f:
             f.write('ERROR')

   if os.path.isfile('gfnff_topo'):
      os.remove('gfnff_topo')
