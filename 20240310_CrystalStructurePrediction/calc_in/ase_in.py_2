import numpy as np
import subprocess
import sys
import os
from ase.calculators.calculator import FileIOCalculator
from ase.units import Bohr, Hartree
from ase.io import write

class xtb_gfnff_pbc(FileIOCalculator):
   implemented_properties = ['energy']
   discard_results_on_any_change = True

   def __init__(self,
      restart=None,
      ignore_bad_restart_file=FileIOCalculator._deprecated,
      label='xtb',
      atoms=None,
      command=None,
      profile=None,
      **kwargs):

      command = 'xtb xtb.coord --gfn 1 --norestart > xtb.out'

      super().__init__(
         restart,
         ignore_bad_restart_file,
         label,
         atoms,
         command=command,
         profile=profile,
         **kwargs)

   def write_input(self, atoms, properties=None, system_changes=None):
      FileIOCalculator.write_input(self, atoms, properties, system_changes)

      with open('xtb.coord', 'w') as fout:
         fout.write('$coord\n')
         for pos, lab in zip(atoms.get_positions(), atoms.get_chemical_symbols()):
            fout.write(f'{pos[0]/Bohr} {pos[1]/Bohr} {pos[2]/Bohr} {lab}\n')
         fout.write('$periodic 3\n')
         fout.write('$lattice bohr\n')
         for xyz in atoms.get_cell():
            fout.write(f'{xyz[0]/Bohr} {xyz[1]/Bohr} {xyz[2]/Bohr}\n')
         fout.write('$end\n')

   def read_results(self):
      found_energy = False
      with open('xtb.out', 'r') as fin:
         for line in fin:
            if 'TOTAL ENERGY' in line:
               try:
                  self.results['energy'] = float(line.split()[3])
                  found_energy = True
                  break
               except:
                  break

      if found_energy == False:
         self.results['energy'] = 0.0

from ase.constraints import ExpCellFilter, StrainFilter
from ase.optimize import BFGS
from ase.spacegroup.symmetrize import FixSymmetry
from ase.io import read, write
import shutil

if __name__ == '__main__':
   try:
      atoms = read('POSCAR', format='vasp')
      atoms.calc = xtb_gfnff_pbc()

      e = atoms.get_total_energy()
      with open('log.tote', mode='w') as f:
         f.write(str(e))

      write('CONTCAR', atoms, format='vasp')

   except:
      with open('log.tote', 'w') as f:
         f.write('9999')
          
      if os.path.isfile('POSCAR'):
         shutil.copyfile('POSCAR', 'CONTCAR')
      elif os.path.isfile('stage1_POSCAR'):
         shutil.copyfile('stage1_POSCAR', 'CONTCAR')
      else:
         with open('CONTCAR', 'w') as f:
             f.write('ERROR')

   if os.path.isfile('gfnff_topo'):
      os.remove('gfnff_topo')
