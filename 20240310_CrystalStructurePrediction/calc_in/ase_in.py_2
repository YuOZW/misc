
import numpy as np
import subprocess
import sys
import os
from ase.calculators.calculator import FileIOCalculator
from ase.units import Bohr, Hartree
from ase.io import write

class xtb_dftb_pbc(FileIOCalculator):
   implemented_properties = ['energy']
   discard_results_on_any_change = True

   def __init__(self,
      restart=None,
      ignore_bad_restart_file=FileIOCalculator._deprecated,
      label='dftb',
      atoms=None,
      command=None,
      profile=None,
      **kwargs):

      command = 'dftb+ > dftb.out'

      super().__init__(
         restart,
         ignore_bad_restart_file,
         label,
         atoms,
         command=command,
         profile=profile,
         **kwargs)

   def write_input(self, atoms, properties=None, system_changes=None):
      FileIOCalculator.write_input(self, atoms, properties, system_changes)

      write('geo_end.gen', atoms)

      with open('dftb_in.hsd', 'w') as fout:
         fout.write('Geometry = GenFormat {\n')
         fout.write('    <<< "geo_end.gen"\n')
         fout.write('}\n')
         fout.write('\n')
         fout.write('Hamiltonian = xTB {\n')
         fout.write('    Method = "GFN2-xTB"\n')
         fout.write('    KPointsAndWeights = SupercellFolding {\n')
         fout.write('        1 0 0\n')
         fout.write('        0 1 0\n')
         fout.write('        0 0 1\n')
         fout.write('        0.0 0.0 0.0\n')
         fout.write('    }\n')
         fout.write('}\n')

   def read_results(self):
      found_energy = False
      with open('dftb.out', 'r') as fin:
         for line in fin:
            if 'Total Energy:' in line:
               try:
                  self.results['energy'] = float(line.split()[2])
                  found_energy = True
                  break
               except:
                  break

      if found_energy == False:
         self.results['energy'] = 0.0


from ase.io import read, write
import shutil

if __name__ == '__main__':
   try:
      atoms = read('POSCAR', format='vasp')
      atoms.calc = xtb_dftb_pbc()

      e = atoms.get_total_energy()
      with open('log.tote', mode='w') as f:
         f.write(str(e))

      write('CONTCAR', atoms, format='vasp')

   except:
      with open('log.tote', 'w') as f:
         f.write('9999')
          
      if os.path.isfile('POSCAR'):
         shutil.copyfile('POSCAR', 'CONTCAR')
      elif os.path.isfile('stage1_POSCAR'):
         shutil.copyfile('stage1_POSCAR', 'CONTCAR')
      else:
         with open('CONTCAR', 'w') as f:
             f.write('ERROR')

   if os.path.isfile('gfnff_topo'):
      os.remove('gfnff_topo')