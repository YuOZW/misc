#!/bin/env make
# 
# created by Sebastian Ehlert in March 2018 (v 2.2)
# 2.0: recreated from scratch
# 2.1: refined the generation of dependencies, since it crashed if not
#      done in the main directory
# 2.2: modified the clean command, to be less severe
#
###------------------------------------------------------------------------###
# a nice trick to print all 'important' targets this Makefile can produce
.PHONY: help

# would be made by default if there is no .DEFAULT_GOAL set
help:
	@echo "This Makefile kindly provides to you:"                     && \
	$(MAKE) --print-data-base --question |                               \
	awk '/^[^.%][-A-Za-z0-9]*:/ {print substr($$1, 1, length($$1)-1)}' | \
	sort | pr --omit-pagination --width=80 --columns=4

##############################################################################
## only edit this file if you know what you are doing                       ##
##############################################################################

###------------------------------------------------------------------------###
# set the path for make to search in:
vpath % $(SRCDIR):$(XTBDIR)

###------------------------------------------------------------------------###
# to use the Intel-Compiler please set MKLROOT somewhere

FC := x86_64-w64-mingw32-gfortran
CC := x86_64-w64-mingw32-gcc

# compile flags
FCFLAGS := -O3 -fopenmp -cpp
FCFLAGS += -I$(INCDIR)                       \
           -I"C:\cygwin64\home\(username)\bin\OpenBLAS-0.3.17\include"
CCFLAGS := -O -DLINUX
CCFLAGS += -D_Float128=__float128
# check for debug build
ifeq ($(DEBUG_BUILD),yes)
FCFLAGS += -g -traceback -check all -debug all
CCFLAGS += -g -DEBUG
endif # DEBUG

# linker
FL := x86_64-w64-mingw32-gfortran
# general flags for linking, this is build incremental to get an overview
FLFLAGS := -static -fopenmp
# add path to libraries
FLFLAGS += -L"C:\cygwin64\home\(username)\bin\OpenBLAS-0.3.17\lib" \
           -L$(LIBDIR)
# add path to include files
FLFLAGS += -I"C:\cygwin64\home\(username)\bin\OpenBLAS-0.3.17\include"


###------------------------------------------------------------------------###
# set the targets
.PHONY: all library program depend

# this is the first, so it will be made by default
all: library
all: program

# we can also enforce it by
.DEFAULT_GOAL=all

###------------------------------------------------------------------------###
# generate the name of the program and the library
LIBNAME  := $(LIBDIR)/lib$(NAME).a
PROGNAME := $(EXEDIR)/$(NAME)
ifeq ($(BUILD_IN_BIN),yes)
   PROGNAME += $(HOME)/bin/$(NAME)
endif # BIN
# set up the dependencies
ifeq ($(USE_DEPENDENCIES),yes)
   DEPS := $(patsubst %.o,$(DEPDIR)/%.d,\
      $(OBJSP) $(OBJS3) $(OBJS2)  $(OBJS1) $(OBJS0))
endif # DEP
# put all objects in the build directory
OBJS3 := $(addprefix $(OUTDIR)/,$(OBJS3))
OBJS2 := $(addprefix $(OUTDIR)/,$(OBJS2))
OBJS1 := $(addprefix $(OUTDIR)/,$(OBJS1))
OBJS0 := $(addprefix $(OUTDIR)/,$(OBJS0))
OBJSP := $(addprefix $(OUTDIR)/,$(OBJSP))
# libraries
LIBS  := $(addprefix -l,$(NAME) $(LIBS))
# we merge all files for convinience
OBJS:= $(OBJSP) $(OBJS3) $(OBJS2) $(OBJS1) $(OBJS0)
# everything should also dependent on the local Makefile
ifeq ($(MAKEFILE_DEP),yes)
   MAKEDEP := Makefile
endif # DEP
ifeq ($(DEP_MAKEFILE_DEP),yes)
   DEPMAKEDEP := Makefile
endif # DEP

###------------------------------------------------------------------------###
# set up the targets for all
library: $(LIBNAME)
program: $(PROGNAME)

ifeq ($(USE_DEPENDENCIES),yes)
depend: $(DEPS)
endif # DEP

###------------------------------------------------------------------------###
# define how to actually generate the library and the program
$(LIBNAME): $(OBJS3) $(OBJS2) $(OBJS1) $(OBJS0)
	@echo "creating $@"                     && \
	$(AR) rv $@ $?                          && \
	echo "finished building $@ successfully"

# build everything together
$(PROGNAME): $(LIBNAME) $(OBJSP)
	@echo "linking $@"                      && \
	$(FL) $(OBJSP) $(LIBS) $(FLFLAGS) -o $@ && \
	echo "finished linking $@ successfully"

###------------------------------------------------------------------------###
# first deactivate some implicit rules
%.o : %.mod
%.f : %.F

# now the rules to actually build the object files
$(OUTDIR)/%.o: %.f $(MAKEDEP)
	@echo "making $@ from $<" && \
	$(FC) $(FCFLAGS) -c $< -o $@
	
$(OUTDIR)/%.o: %.f90 $(MAKEDEP)
	@echo "making $@ from $<" && \
	$(FC) $(FCFLAGS) -c $< -o $@

$(OUTDIR)/%.o: %.c $(MAKEDEP)
	@echo "making $@ from $<" && \
	$(CC) $(CCFLAGS) -c $< -o $@

ifeq ($(USE_DEPENDENCIES),yes)
# this is a crutial part of this Makefile!
-include $(DEPS)

$(OUTDIR)/%.o: $(DEPDIR)/%.d

# now for the dependencies,
# we use a script hacked together in ruby (v 2.5.0) for this job
$(DEPDIR)/%.d: %.f90 $(DEPMAKEDEP)
	@echo "generating dependencies for $<"    && \
	deps=`ruby $(MAKEDIR)/depend.rb $<`       && \
	echo "\$$(OUTDIR)/$*.o:$$deps" > $@

$(DEPDIR)/%.d: %.f $(DEPMAKEDEP)
	@echo "generating dependencies for $<"    && \
	deps=`ruby $(MAKEDIR)/depend.rb $<`       && \
	echo "\$$(OUTDIR)/$*.o:$$deps" > $@

# no hacks needed for C/C++ dependencies
$(DEPDIR)/%.d: %.c $(DEPMAKEDEP)
	@echo "generating dependencies for $<" && \
	$(CC) $(CPPFLAGS) -MM $< > $@

$(DEPDIR)/%.d: %.cc $(DEPMAKEDEP)
	@echo "generating dependencies for $<" && \
	$(CXX) $(CPPFLAGS) -MM $< > $@

endif # DEP

###------------------------------------------------------------------------###
# clean up, at the right places
.PHONY: clean distclean veryclean

clean:
	$(RM) $(filter %.o,$(OBJS))

distclean:
	$(RM) $(OUTDIR)/*.o $(MODDIR)/*.mod $(PROGNAME) $(LIBNAME)

# in case you use the dependency build you can get rid of those files to
veryclean: distclean
	$(RM) $(DEPDIR)/*.d

